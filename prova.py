from Cryptodome.Util.number import getRandomNBitInteger
from Keygen import bits_check
from sympy import primorial
from sympy.ntheory.residue_ntheory import _discrete_log_pohlig_hellman
from sympy import isprime

e = 0x10001
bits_key=input("Inserire lunghezza bit della chiave (Default=1024): ")

if bits_key=="":
    bits_key=int(1024)
else:
    bits_key=int(bits_key)
N=0
p=0
q=0
while N.bit_length()!=bits_key:
    while True:
        p=getRandomNBitInteger(int(bits_key/2))
        if isprime(p):
            print("P",p.bit_length())
            break
    while True:
        q=getRandomNBitInteger(int(bits_key/2))
        if isprime(q):
            print("Q",q.bit_length())
            break
    N=p*q
    print("N",N.bit_length())

n=bits_check(N.bit_length())

M=primorial(n)
try:
    c=_discrete_log_pohlig_hellman(M,N,e)
    print("Chiave vulnerabile")
except:
    print("Chiave non vulnerabile")
