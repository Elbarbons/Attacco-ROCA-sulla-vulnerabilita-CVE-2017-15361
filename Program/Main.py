#sage -python3 C:/users/pablo/desktop/tesi-main/main.py
#Il codice è disponibile su LINK GITHUB
#e contiene codice in sage

#Richiama tutte le funzioni  dai file del programma, formatta e stampa i risultati.
#Si consiglia di usare il programma con input tra 64 e 128 ,
#poichè con lunghezze di bit maggiori il tempo di calcolo potrebbe essere
#notevolmente lungo.

import time
import os
from Fingerprinting import fingprint
from Keygen import GenVulnerableKeys
from Attack import attack

start_time=time.time()

#Funzione per fare clear della shell (su windows)
def clear():
    os.system('cls')

#Acquisizione lunghezza della chiave(input), controllo del valore e castiamo int()
#Nessun valore inserito:usiamo il valore di Default 64
#Input inserito non è un numero intero: segnaliamo un errore
bits_key=input("Inserire lunghezza bit della chiave (Default=64): ")
if len(bits_key)== 0:
    bits_key=64
else:
    try:
        bits_key=int(bits_key)
    except TypeError:
        print("Non hai inserito un numero")

#Genera la chiave pubblica richiamando la funzione dal file Keygen.py
N,p,q=GenVulnerableKeys(bits_key)

#Clear della shell di python e stampa della chiave formattata
clear()
print("-------------------------------------------------------------------------------")
print("                                    PUBLIC KEY (",N.bit_length(),"bits) ")
print("-------------------------------------------------------------------------------")
print("(N , e) =","(",N,",",65537,")")

#Stampa in ordine crescente i numeri primi
if p<q:
    print("(p,q)=(",p,",",q,")")
else:
    print("(p,q)=(",q,",",p,")")

#Output fingerprinting formattato
print("\n")
print("-------------------------------------------------------------------------------")
print("                                    FINGERPRINTING")
print("-------------------------------------------------------------------------------")

#Fa il fingerprinting sulla chiave generata attraverso il richiamo della
#funzione fingprint() dal file Fingerprinting.py e stampiamo a schermo;
#se il fingerprinting fallisce il programma si ferma.
if fingprint(N):
    print("La chiave è vulnerabile")
else:
    print("La chiave non è vulnerabile")
    return
print("\n")

#Output dell'attacco formattato
print("-------------------------------------------------------------------------------")
print("                                    ATTACCO")
print("-------------------------------------------------------------------------------")

#Facciamo l'attacco sulla chiave generata attraverso il richiamo
#della funzione attack() dal file Attack.py
results=attack(N)

#Ordina la stampa dei numeri primi in ordine crescente
if results[0]<results[1]:
    print("(p,q)=(",results[0],",",results[1],")")
else:
    print("(p,q)=(",results[1],",",results[0],")")

#Calcola e stampa il tempo di esecuzione del programma
stop_time=time.time()
total_time=stop_time - start_time
print("\n")
print("\n")
print("---- Programma eseguito in ",total_time,"secondi")
