#Mette in atto l'attacco sulla chiave RSA vulnerabile con il solo input N,
#chiave pubblica

from sympy.ntheory.residue_ntheory import _discrete_log_pohlig_hellman
from labmath import multord
from sympy import primorial
from Keygen import bits_check
from sage.all import *

#e=0x10001=65537
e=0x10001

def coppersmith_howgrave_univariate(pol, modulus, beta, mm, tt, XX):
#Presa da
#https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/coppersmith.sage
#e rimosse le parti non necessarie

    dd = pol.degree()
    nn = dd * mm + tt

    if not 0 < beta <= 1:
        raise ValueError("beta should belongs in (0, 1]")

    if not pol.is_monic():
        raise ArithmeticError("Polynomial must be monic.")

    # change ring of pol and x
    polZ = pol.change_ring(ZZ)
    x = polZ.parent().gen()

    # compute polynomials
    gg = []
    for ii in range(mm):
        for jj in range(dd):
            gg.append((x * XX)**jj * modulus**(mm - ii) * polZ(x * XX)**ii)
    for ii in range(tt):
        gg.append((x * XX)**ii * polZ(x * XX)**mm)

    # construct lattice B
    BB = Matrix(ZZ, nn)

    for ii in range(nn):
        for jj in range(ii+1):
            BB[ii, jj] = gg[ii][jj]

    # LLL
    BB = BB.LLL()

    # transform shortest vector in polynomial
    new_pol = 0
    for ii in range(nn):
        new_pol += x**ii * BB[0, ii] / XX**ii

    # factor polynomial
    potential_roots = new_pol.roots()

    # test roots
    roots = []
    for root in potential_roots:
        if root[0].is_integer():
            result = polZ(ZZ(root[0]))
            if gcd(modulus, result) >= modulus**beta:
                roots.append(ZZ(root[0]))

    return roots


def solve(M, n, a, m, t, beta):
#Crea il polinomio monico associato al problema
#Input:M,N,a
#Output:p e q, i due numeri primi che fattorizzano N

    #Calcola la parte nota di p: 65537^a * M^-1 (mod N)
    p_noto = int(pow(e, a, M) * inverse_mod(M, n))

    #Crea il polinomio f(x)
    A = PolynomialRing(Zmod(n), implementation='NTL', names=('x',))
    (f,) = A._first_ngens(1)
    polinomio = f + p_noto

    #Limite superiore della radice piccola x0
    Lim_sup = floor(2 * n**0.5 / M)

    #Trova la radice piccola usando l'algoritmo di Coppersmith
    radici = coppersmith_howgrave_univariate(polinomio, n, beta, m, t, Lim_sup)

    #Se a Ã¨ sbagliato non esisteranno radici
    for i in radici:

        #Ricostruisce P dalla k calcolata
        p = int(i*M + pow(base, a, M))
        if n%p == 0:
            return [p, n//p]


def attack(N):
#Funzione da richiamare per fare l'attacco sulla chiave N
#Input: N, chiave da attaccare
#Output: list, lista contentente i due numeri primi che fattorizzano N

    n=bits_check(N.bit_length())
    M=primorial(n)
    c = _discrete_log_pohlig_hellman(M,N,e)
    order = multord(e, M)

    #Genera il range su cui iterare 'a'
    inf = c//2
    sup = (c+order)//2

    for a in range(inf,sup):
        list = solve(M, N, a, 5, 6, 0.1)

        #se la funzione va a buon fine ritorniamo il risultato (list)
        if list!=None and list[0]*list[1]==N :
            return list
