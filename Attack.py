from sympy.ntheory.residue_ntheory import _discrete_log_pohlig_hellman
from labmath import multord
from sympy import primorial
from Keygen import bits_check
e=0x10001

def coppersmith_howgrave_univariate(pol, modulus, beta, mm, tt, XX):
    """
    Taken from https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/coppersmith.sage
    """
    dd = pol.degree()
    nn = dd * mm + tt

    if not 0 < beta <= 1:
        raise ValueError("beta should belongs in (0, 1]")
    if not pol.is_monic():
        raise ArithmeticError("Polynomial must be monic.")

    # change ring of pol and x
    polZ = pol.change_ring(ZZ)
    x = polZ.parent().gen()

    # compute polynomials
    gg = []
    for ii in range(mm):
        for jj in range(dd):
            gg.append((x * XX)**jj * modulus**(mm - ii) * polZ(x * XX)**ii)
    for ii in range(tt):
        gg.append((x * XX)**ii * polZ(x * XX)**mm)

    # construct lattice B
    BB = Matrix(ZZ, nn)

    for ii in range(nn):
        for jj in range(ii+1):
            BB[ii, jj] = gg[ii][jj]

    # LLL
    BB = BB.LLL()

    # transform shortest vector in polynomial
    new_pol = 0
    for ii in range(nn):
        new_pol += x**ii * BB[0, ii] / XX**ii

    # factor polynomial
    potential_roots = new_pol.roots()

    # test roots
    roots = []
    for root in potential_roots:
        if root[0].is_integer():
            result = polZ(ZZ(root[0]))
            if gcd(modulus, result) >= modulus^beta:
                roots.append(ZZ(root[0]))

    return roots

def invmodp(a, p):
    for d in range(1, p):
        r = (d * a) % p
        if r == 1:
            break
    else:
        raise ValueError('%d has no inverse mod %d' % (a, p))
    return d

def solve(M, n, a, m, t, beta):
    base = int(65537)
    # the known part of p: 65537^a * M^-1 (mod N)
    known = int(pow(base, a, M) * invmodp(M, n))
    # Create the polynomial f(x)
    F = PolynomialRing(Zmod(n), implementation='NTL', names=('x',))
    (x,) = F._first_ngens(1)
    pol = x + known
    # Upper bound for the small root x0
    XX = floor(2 * n^0.5 / M)
    # Find a small root (x0 = k) using Coppersmith's algorithm
    roots = coppersmith_howgrave_univariate(pol, n, beta, m, t, XX)
    # There will be no roots for an incorrect guess of a.
    for k in roots:
        # reconstruct p from the recovered k
        p = int(k*M + pow(base, a, M))
        if n%p == 0:
            return p, n//p

def attack(N,p):
    n=bits_check(N.bit_length())
    M=primorial(n)
    a3 = _discrete_log_pohlig_hellman(M,N,e)
    order = multord(e, M)
    inf = a3//2
    sup = (a3+order)//2
    print("interval :", [inf, sup])

    # attempt to find p
    # Compute the right values for a and k
    #print(f"a1: {a1}. In interval: {inf <= a1 <= sup}")
    #k = (p - int(pow(65537, a1, M))) // M
    # Assert correctness of the values
    #assert(k*M + pow(65537, a1, M) == p)
    # solve using the parameters from the paper
    a1 = _discrete_log_pohlig_hellman(M,p,e)
    print("a1:", a1,". In interval: {inf <=",a1," <= sup}")
    k = (p - int(pow(65537, a1, M))) // M
    # Assert correctness of the values
    if (k*M + pow(65537, a1, M) == p):
        print("OK")
    factors = solve(M, N, a1, 5, 6, 0.5)
    print("Known p:",p, factors)
"""
    # attempt to find q
    # Compute the right values for a and k
    a2 = int(Zmod(M)(q).log(65537))
    print(f"a2: {a2}. In interval: {inf <= a2 <= sup}")
    k = (q - int(pow(65537, a2, M))) // M
    # Assert correctness of the values
    assert(k*M + pow(65537, a2, M) == q)
    # solve using the parameters from the paper
    factors = solve(M, n, a2, 5, 6, 0.1)
    print(f"Known q: {factors}")
"""
