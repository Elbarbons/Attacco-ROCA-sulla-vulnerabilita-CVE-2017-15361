"""
implementare:
-Generatore di chiavi
-Fingerprinting(capire se le chiavi sono del tipo giusto,
                cioe' ricavate usando quella formula)
-Attacco coppersmith
....
maybe confronti con altri tipi di attacchi
"""

"""
1. GENERATORE DI CHIAVI
"""
import time
import os
from Fingerprinting import fingprint
from Keygen import GenVulnerableKeys

start_time=time.time()

#Funzione per fare clear della shell (su windows)
def clear():
    os.system('cls')

#Acquisizione lunghezza della chiave e controllo del valore e castiamo int()
#Nessun valore inserito:usiamo il valore di Default
#Non numero: segnaliamo un errore
bits_key=input("Inserire lunghezza bit della chiave (Default=64): ")
if len(bits_key)== 0:
    bits_key=64
else:
    try:
        bits_key=int(bits_key)
    except:
        raise Errore("Non hai inserito un numero")

#Generiamo la chiave pubblica
N=GenVulnerableKeys(bits_key)
#Output chiave
clear()
print("-------------------------------------------------------------------------------")
print("                                    PUBLIC KEY (",N.bit_length(),"bits) ")
print("-------------------------------------------------------------------------------")
print("(N , e) =","(",N,",",65537,")")
print("\n")
print("-------------------------------------------------------------------------------")
print("                                    FINGERPRINTING")
print("-------------------------------------------------------------------------------")
#Fingerprinting
if fingprint(N):
    print("La chiave è vulnerabile")
else:
    print("La chiave non è vulnerabile")
print("\n")

stop_time=time.time()
total_time=stop_time - start_time
print("----",total_time,"secondi")
